/*https://leetcode.com/problems/binary-tree-paths/

Given a binary tree, return all root-to-leaf paths.

Note: A leaf is a node with no children.

Example:

Input:

   1
 /   \
2     3
 \
  5

Output: ["1->2->5", "1->3"]

Explanation: All root-to-leaf paths are: 1->2->5, 1->3*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<string>out;
    void willdo(TreeNode*root,string str)
    {
      if(root==NULL)
      {
        return;
      }
      if(root->right==NULL && root->left==NULL)
      {
        str=str+to_string(root->val);
        out.push_back(str);
        return;
      }
      willdo(root->left,str+to_string(root->val)+"->");
      willdo(root->right,str+to_string(root->val)+"->");
    }
    vector<string> binaryTreePaths(TreeNode* root) {
      int i,j;
      
      willdo(root,"");
      return out;
        
    }
};
