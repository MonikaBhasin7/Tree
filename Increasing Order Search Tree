/*Given a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only 1 right child.

Example 1:
Input: [5,3,6,2,4,null,8,1,null,null,null,7,9]

       5
      / \
    3    6
   / \    \
  2   4    8
 /        / \ 
1        7   9

Output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]

 1
  \
   2
    \
     3
      \
       4
        \
         5
          \
           6
            \
             7
              \
               8
                \
                 9  */
                 
                 
                 
                 
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int>v;
    TreeNode*willdo(int index)
    {
      if(index>=v.size())
      {
        return NULL;
      }
      TreeNode*node=new TreeNode(v[index]);
      node->right=willdo(index+1);
      node->left=NULL;
      return node;
    }
    void inorder(TreeNode*root)
    {
      if(root==NULL) return;
      inorder(root->left);
      v.push_back(root->val);
      inorder(root->right);
    }
    TreeNode* increasingBST(TreeNode* root) {
      int i,j;
      
      inorder(root);
      
      return willdo(0);
        
    }
};
