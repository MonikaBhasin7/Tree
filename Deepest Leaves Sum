/*https://leetcode.com/problems/deepest-leaves-sum/
Given a binary tree, return the sum of values of its deepest leaves.
 

Example 1:



Input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]
Output: 15
 

Constraints:

The number of nodes in the tree is between 1 and 10^4.
The value of nodes is between 1 and 100.https://leetcode.com/problems/deepest-leaves-sum/
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int s=0;
    int height(TreeNode*root)
    {
      if(root==NULL)
      {
        return 0;
      }
      return max(height(root->left),height(root->right))+1;
    }
    void go(TreeNode*node,int i)
    {
      if(node==NULL)
      {
        return;
      }
      if(i==1)
      {
        s=s+node->val;
        return;
      }
      go(node->left,i-1);
      go(node->right,i-1);
    }
    int deepestLeavesSum(TreeNode* root) {
      int i,j;
      
      int h=height(root);
      cout<<h;
      go(root,h);
      return s;
    }
};
