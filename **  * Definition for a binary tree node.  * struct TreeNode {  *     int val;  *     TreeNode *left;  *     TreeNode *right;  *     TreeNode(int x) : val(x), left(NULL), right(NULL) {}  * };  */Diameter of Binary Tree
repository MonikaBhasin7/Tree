/*https://leetcode.com/problems/diameter-of-binary-tree/
Given a binary tree, you need to compute the length of the diameter of the tree. The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

Example:
Given a binary tree
          1
         / \
        2   3
       / \     
      4   5    
Return 3, which is the length of the path [4,2,1,3] or [5,2,1,3].

Note: The length of path between two nodes is represented by the number of edges between them.*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int height(TreeNode*root)
    {
        if(root==NULL)
        {
            return 0;
        }
        return max(height(root->left),height(root->right))+1;
    }
    int willdo(TreeNode*root)
    {
        if (root == NULL) 
        {
            return 0;
        }
        int l=height(root->left);
        int r=height(root->right);
        
        int d1=willdo(root->left);
        int d2=willdo(root->right);
        
        return max((l+r+1),max(d1,d2));
    }
    int diameterOfBinaryTree(TreeNode* root) {
        int i,j;
        
        if(root==NULL)
        {
            return NULL;
        }
        return willdo(root)-1;
        
    }
};
